from collections import deque 
                          

def bfs(graph, start_node):

    if not graph or start_node not in graph:  
        return []

    visited = set()  
    queue = deque([start_node])  
    visited.add(start_node)
    bfs_order = []  

    while queue:
        current_node = queue.popleft()  
        bfs_order.append(current_node)

      
        for neighbor in graph.get(current_node, []):  
            if neighbor not in visited:  
                visited.add(neighbor)
                queue.append(neighbor) 

    return bfs_order



graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}

start_node = 'A'
bfs_traversal = bfs(graph, start_node)
print(f"BFS traversal from {start_node}: {bfs_traversal}")
